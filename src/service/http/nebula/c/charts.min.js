import{neb}from"../dist/web/main.js";const time=neb.time,d3=neb.d3,ds=neb.d3.select,nb=neb.bb,bb=nb.bb,bar=nb.bar,pie=nb.pie,spline=nb.spline,area=nb.area,isTime=c=>"_time_"===c,pad2=v=>`${v}`.padStart(2,0),EMPTY="(null)";export class Charts{constructor(){this.displayTable=(chartId,json)=>{if(json.length>0){const area=ds(chartId);area.html("");const tb=area.append("table");tb.append("thead").append("tr").attr("id","table_head"),tb.append("tbody").attr("id","table_content");const keys=Object.keys(json[0]),width=Math.round(100/keys.length);ds("#table_head").selectAll("th").data(keys).enter().append("th").attr("width",`${width}%`).text(d=>isTime(d)?"[time]":d),ds("#table_content").selectAll("tr").data(json).enter().append("tr").selectAll("td").data(row=>keys.map(column=>({column:column,value:isTime(column)?time.format(1e3*row[column]):row[column]}))).enter().append("td").text(d=>d.value)}},this.columns=(json,keys,metrics,headless)=>{const cols=[...keys,...metrics],numKeys=keys.length,data=[];return cols.forEach(c=>data.push(headless?[]:[c])),json.forEach(row=>{for(let i=0;i<numKeys;++i)data[i].push(`${row[cols[i]]}`||EMPTY);for(let i=numKeys;i<cols.length;++i)data[i].push(row[cols[i]])}),data},this.key2x=(keys,option)=>{1==keys.length&&(option.data.x=keys[0],option.axis={x:{type:"category"}})},this.displayBar=(chartId,json,keys,metrics)=>{ds(chartId).html("");const option={data:{columns:this.columns(json,keys,metrics),type:bar()},bar:{width:{ratio:.6}},bindto:chartId};this.key2x(keys,option);const chart=bb.generate(option)},this.displayPie=(chartId,json,keys,metrics)=>{ds(chartId).html("");const data=this.columns(json,keys,metrics,!0);0==keys.length&&data.unshift([metrics[0]]);const option={data:{rows:data,type:pie()},bindto:chartId},chart=bb.generate(option)},this.displayLine=(chartId,json,keys,metrics)=>{ds(chartId).html("");const option={data:{columns:this.columns(json,keys,metrics),type:spline()},bindto:chartId};this.key2x(keys,option);const chart=bb.generate(option)},this.displayFlame=(chartId,json,keys,metrics)=>{if(json&&json.length){const margin={top:20,right:60,bottom:20,left:60},area=ds(chartId);area.html("");const width=area.node().scrollWidth-margin.left-margin.right,key=0==keys.length?null:keys[0],value=metrics[0];for(var i=0;i<json.length;++i){const title=key?json[i][key]:null,data=`${json[i][value]}`;if(0==data.length)continue;const blob=JSON.parse(data),flame=neb.flamegraph().width(width).sort(!0).minFrameSize(1);title&&flame.title(title),area.append("div").datum(blob).call(flame)}}},this.displayTimeline=(chartId,json,keys,metrics,timeCol,start)=>{ds(chartId).html("");const key=0==keys.length?null:keys[0],value=metrics[0],times=[],cols={[timeCol]:times};json.forEach(row=>{const variant=key in row?row[key]||EMPTY:value;cols[variant]=cols[variant]||[],cols[variant].push(row[value]);const time=1e3*row[timeCol]+start;if(0==times.length||time!=times[times.length-1]){for(const v in cols){const column=cols[v];for(;column.length<times.length;)column.push(null)}times.push(time)}});const option={data:{x:timeCol,json:cols,type:area()},axis:{x:{tick:{fit:!1,count:10},type:"timeseries"}},tooltip:{format:{title:x=>d3.timeFormat("%Y-%m-%d %H:%M:%S")(x)}},zoom:{enabled:!0,type:"drag"},point:{focus:{only:!0}},bindto:chartId},chart=bb.generate(option)}}}