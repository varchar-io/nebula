import{neb}from"./dist/web/main2.js";import{Nebula,count,sum,min,max,avg,tree,p10,p25,p50,p75,p90,p99,p99_9,p99_99,and,or,eq,neq,gt,lt,like,ilike}from"./__/sdk.min.js";import{Constraints}from"../c/constraints.min.js";import{Charts}from"./c/charts2.min.js";const time=neb.time,$$=e=>$(e).val();let ds={keys:[],metrics:[],rows:[]},tableInfo={},fpcs,fpce;const timeCol="_time_",windowCol="_window_",autoKey=c=>c==timeCol||c==windowCol,charts=new Charts,nebula=new Nebula,formatTime=charts.formatTime,chartId="#show",fieldsId="fields",fieldsRef=`#${fieldsId}`,tablesId="#tables",startId="#start",endId="#end",windowId="#window",displayId="#display",NoRollup=-1,msg=text=>$("#qr").text(text),vis=(id,flag)=>$(id).css("visibility",flag?"visible":"hidden"),FETCH_OPT={method:"GET"};let filters,$sdc=null;const field=(c,m)=>{const valid=m in neb.Rollup;return{M:valid?neb.Rollup[m]:NoRollup,C:c,T:valid?`${m.toLowerCase()}(${c})`:c}},makeCalendar=(obj,id,btn,def,min,max)=>{obj=$(id).flatpickr({enableTime:!0,allowInput:!0,clickOpens:!1,dateFormat:"Y-m-d H:i:S",defaultDate:def,minDate:min,maxDate:max,allowInvalidPreload:!0}),$(btn).on("click",()=>{setTimeout(()=>{obj.open()},0)})},onTableState=(tb,stats,callback)=>{tableInfo=tb;const bc=tb.bc,rc=Math.round(tb.rc/1e4)/100,ms=Math.round(tb.ms/1e7)/100,mints=formatTime(1e3*tb.mt),maxts=formatTime(1e3*tb.xt+1);stats.text(`[Blocks: ${bc}, Rows: ${rc}M, Mem: ${ms}GB, Min T: ${mints}, Max T: ${maxts}]`),makeCalendar(fpcs,startId,"#startc",mints,mints,maxts),makeCalendar(fpce,endId,"#endc",maxts,mints,maxts);const strColumns=(tb.dl||[]).filter(v=>v!==timeCol),numColumns=(tb.ml||[]).filter(v=>v!==timeCol),allColumns=strColumns.concat(numColumns),all=[];allColumns.map(e=>all.push(field(e)));for(let r in neb.Rollup){if("COUNT"===r){all.push(field(all[0].C,r));continue}let targetColumns=numColumns;"TREEMERGE"===r&&(targetColumns=strColumns),targetColumns.map(e=>all.push(field(e,r)))}$("#dwrapper").html(`<select id="${fieldsId}" multiple></select>`);const ef=$(fieldsRef).html("");all.forEach(d=>{$("<option/>").appendTo(ef).text(d.T).val(`${JSON.stringify(d)}`)}),$sdc=ef.selectize({plugins:["restore_on_backspace","remove_button"],persist:!1}),$("#ob").html(""),Object.keys(neb.OrderType).forEach(k=>{$("<option/>").appendTo($("#ob")).text(k.toLowerCase()).val(neb.OrderType[k])}),callback&&callback(allColumns)},initTable=(table,callback)=>{const stats=$("#stats");fetch(`/?api=state&start=0&end=0&table=${encodeURIComponent(table)}`,FETCH_OPT).then(response=>response.json()).then(data=>onTableState(data,stats,callback)).catch(err=>stats.text("Error: "+err))},checkRequest=state=>{if(state.metrics&&state.metrics.length>1)for(var i=0;i<state.metrics.length;i++)if(state.metrics[i].M==neb.Rollup.HIST)return msg("Please only select one hist in Fields"),!0;if(!state.start||!state.end)return!0;if(state.timeline){const windowSize=state.window;if(windowSize>0){const rangeSeconds=(state.end-state.start)/1e3,buckets=rangeSeconds/windowSize;if(buckets>1e3)return msg(`Too many data points to return ${buckets}, please increase window granularity.`),!0}if(0==state.metrics.length)return msg("Timeline requires metric fields."),!0}return!1},hash=v=>(v&&(window.location.hash=v),window.location.hash),build=s=>{const keys=[],metrics=[];if($$(fieldsRef).map(e=>{const f=JSON.parse(e);f.M===NoRollup?keys.push(f.C):metrics.push(f)}),0==keys.length&&0==metrics.length&&(keys.push(...tableInfo.dl),keys.push(...tableInfo.ml),keys.sort()),metrics.length>0&&keys.length>2)return void msg("Risk: too many keys to aggregate by.");0==metrics.length&&keys.unshift(timeCol);const state=s||{table:$$(tablesId),start:$$(startId),end:$$(endId),filter:filters.expr(),keys:keys,timeline:$("#timeline").is(":checked"),window:$$(windowId),metrics:metrics,sort:$$("#ob"),limit:$$("#limit")};state.start&&state.end?hash("#"+encodeURIComponent(JSON.stringify(state))):msg("Error: please enter start and end time")};let timer=null,timer2=null;const clsTimer=()=>{timer&&clearInterval(timer),timer2&&clearTimeout(timer2)},restore=()=>{clsTimer();const state=url2state(),set=(N,V)=>{V&&$(N).val(V)};let table=state.table,found=!1,first=null;$(`${tablesId} option`).each((t,v)=>{first=first||v.value,v.value===table&&(found=!0)}),found||(timer=animate(`preparing table ${table} `),timer2=setTimeout(()=>{location.reload()},3e3),table=first),table&&(set(tablesId,table),initTable(table,cols=>{set(startId,state.start),set(endId,state.end),$("#timeline").prop("checked",state.timeline),set(windowId,state.window),vis(windowId,state.timeline),set("#ob",state.sort),set("#limit",state.limit);const fields=[];(state.keys||[]).map(e=>fields.push(JSON.stringify(field(e)))),(state.metrics||[]).map(e=>fields.push(JSON.stringify(e))),$sdc&&fields.length>0&&$sdc[0].selectize.setValue(fields);const om={EQ:"=",NEQ:"!=",MORE:">",LESS:"<",LIKE:"like",ILIKE:"ilike"},ops={};for(var k in neb.Operation)ops[neb.Operation[k]]=om[k];filters=new Constraints(!1,"filters",cols,ops,state.filter),state.code&&state.code.length>0&&editor.getValue()!=state.code&&(editor.setValue(state.code),ide()),execute(state)}))},onQueryResult=(state,r)=>{if(r.error)return void msg(`[query: error=${r.error}, latency=${r.duration} ms]`);msg(`[query: latency=${r.duration}ms, scan=${r.rows_scan}, blocks=${r.blocks_scan}, rows=${r.rows_ret}]`),ds.timeline=state.timeline,ds.rows=JSON.parse(atob(r.data)),ds.keys=[...state.keys],ds.metrics=[];for(const key in ds.rows[0])ds.keys.includes(key)||autoKey(key)||ds.metrics.push(key);if(state.pivot){const pvc=state.pivot,mc=ds.metrics[0],dataMap={},keys=ds.keys.filter(e=>e!=pvc);state.timeline&&keys.push(windowCol);const metrics={},mapKey=row=>{const key=[];let value={};keys.forEach(e=>{const v=row[e];value[e]=v,key.push(`${v}`)});const keyStr=key.join("-");keyStr in dataMap?value=dataMap[keyStr]:dataMap[keyStr]=value;const pivotValue=row[pvc];metrics[pivotValue]=1,value[pivotValue]=row[mc]};ds.rows.forEach(mapKey);const rows=[];for(const k in dataMap){const r=dataMap[k];for(const m in metrics)m in r||(r[m]=0);rows.push(r)}ds.rows=rows,ds.keys=keys.filter(e=>e!=windowCol),ds.metrics=Object.keys(metrics)}if(state.map&&state.map.length>0){const nmap=eval(state.map)();if(nmap&&"function"==typeof nmap){ds.rows.forEach(nmap);for(const col in ds.rows[0])autoKey(col)||ds.keys.includes(col)||ds.metrics.includes(col)||ds.metrics.push(col)}}if(state.rm&&state.rm.length>0){const reduced=ds.metrics.filter(e=>!state.rm.includes(e));reduced.length<ds.metrics.length&&(ds.metrics=reduced)}if($("#table").html(""),$(displayId).hide(),0==ds.rows.length)return void $("#show").html("<b>NO RESULTS.</b>");const choices=list=>{const arr=list||[];arr.length>0?$(displayId).show():$(displayId).hide(),$(displayId).html(""),arr.forEach(t=>$("<option/>").appendTo($(displayId)).text(t).val(t))};ds.timeline?choices(["timeline","timeline-area","timeline-bar"]):1==state.metrics.length&&state.metrics[0].M==neb.Rollup.TREEMERGE?choices(["icicle","flame"]):1==state.metrics.length&&state.metrics[0].M==neb.Rollup.HIST?choices(["column","bar"]):state.metrics.length>0?choices(["column","bar","doughnut","pie","line"]):choices();const draw=()=>{$(chartId).html("");const keys=[...ds.keys],data=[...ds.rows],metrics=[...ds.metrics];if(keys.length>1){const con=" - ",combinedCol=keys.join(con);data.forEach(row=>{row[combinedCol]=keys.map(e=>row[e]).join(con)}),keys.length=0,keys.push(combinedCol)}const histIndex=histJsonIdx(metrics);let err=null,showTable=!0;if(-1!=histIndex){showTable=!1;const[transformedData,transformedMetrics]=processHistJson(data,metrics,histIndex);data.length=0,transformedData.map(e=>data.push(e)),metrics.length=0,transformedMetrics.map(e=>metrics.push(e))}const choice=$(displayId).val(),beginMs=1e3*time.seconds(state.start);switch(choice){case"timeline":err=charts.displayTimeline(chartId,data,keys,metrics,windowCol,beginMs,0);break;case"timeline-area":err=charts.displayTimeline(chartId,data,keys,metrics,windowCol,beginMs,1);break;case"timeline-bar":err=charts.displayTimeline(chartId,data,keys,metrics,windowCol,beginMs,2);break;case"icicle":err=charts.displayFlame(chartId,data,keys,metrics,!1),showTable=!1;break;case"flame":err=charts.displayFlame(chartId,data,keys,metrics,!0),showTable=!1;break;case"column":err=charts.displayBar(chartId,data,keys,metrics,!0,-1!=histIndex);break;case"bar":err=charts.displayBar(chartId,data,keys,metrics,!1,-1!=histIndex);break;case"doughnut":err=charts.displayPie(chartId,data,keys,metrics,!0);break;case"pie":err=charts.displayPie(chartId,data,keys,metrics,!1);break;case"line":err=charts.displayLine(chartId,data,keys,metrics)}showTable&&($("#table").attr("class","fh300"),charts.displayTable("#table",ds.rows,[timeCol,windowCol,...ds.keys],ds.metrics),0==metrics.length&&$("#table").removeClass("fh300")),err&&msg(`Error: ${err}`)};draw();var resizeTimer=void 0;$(window).on("resize",()=>{clearTimeout(resizeTimer),resizeTimer=setTimeout(draw,200)}),$(displayId).change(draw)},histJsonIdx=metrics=>{for(var i=0;i<metrics.length;i++)if(metrics[i].endsWith(".HIST"))return i;return-1},processHistJson=(data,metrics,histJsonIdx)=>{let transformedDict=[],transformedLabels=[];for(var idx=0;idx<data.length;idx++){let dict={},labels={};for(var key in data[idx])if(key===metrics[histJsonIdx]){let histJsonStr,hists=JSON.parse(data[idx][key]).b,tmpDict={},tmpLabels=[];for(var i=0;i<hists.length;i++){let count=hists[i][2],label;label=0===i?"[min, "+hists[i][1]+"]":i===hists.length-1?"["+hists[i][0]+", max]":"["+hists[i][0]+", "+hists[i][1]+"]",tmpDict[label]=count,tmpLabels.push(label)}dict[key]=tmpDict,labels[key]=tmpLabels}else dict[key]=data[idx][key];transformedLabels.push(labels),transformedDict.push(dict)}return[transformedDict,transformedLabels]},url2state=()=>{const input=decodeURIComponent((hash()||`#${$$(tablesId)}`).substr(1));let state={table:input};try{state=JSON.parse(input)}catch{}return state};let dots=0;const animate=(prefix,interval)=>setInterval(()=>{dots=(dots+1)%50,msg(`${prefix}${".".repeat(dots)}`)},interval||200),execute=state=>{if(state||(state=url2state()),checkRequest(state))return;timer=animate("soaring in nebula ");const url=`/?api=query&start=0&end=0&query=${encodeURIComponent(JSON.stringify(state))}`;fetch(url,FETCH_OPT).then(response=>response.json()).then(data=>{clsTimer(),onQueryResult(state,data)}).catch(err=>{clsTimer(),msg(`Error: ${err}`)})};$("#share").on("click",()=>{const path=location.href.substr(location.origin.length);fetch(`/?api=url&url=${encodeURIComponent(path)}`,FETCH_OPT).then(response=>response.json()).then(data=>{data.code&&data.code.length>4&&msg(`[query url: ${location.origin}/n/${data.code}]`)}).catch(err=>{msg(`Error: ${err}`)})});const editor=CodeMirror.fromTextArea($("#code").get(0),{lineNumbers:!1,lineWrapping:!0,styleActiveLine:!0,matchBrackets:!0,mode:"javascript",theme:"dracula"}),ide=()=>{const c_on="tap-on",c_off="tap-off",on=$(".tap-on"),off=$(".tap-off");on.removeClass(c_on).addClass(c_off),off.removeClass(c_off).addClass(c_on),setTimeout(()=>editor.refresh(),5)},iside=()=>"tap-off"==$("#qc").attr("class"),exec=()=>{const code=editor.getValue();nebula.reset();try{eval(code)}catch(e){return void msg(`Code Error: ${e.message}`)}const error=nebula.validate();if(error)return void msg(`Validation Error: ${error}`);const state=nebula.build();state.code=code,build(state)};window.onhashchange=function(){restore()};const onTableList=tables=>{if(tables&&tables.length>0)return tables.sort().forEach(t=>$("<option/>").appendTo($(tablesId)).text(t).val(t)),void restore();msg("Nebula is down: can not fetch tables")};$(()=>{const stats=$("#stats");fetch("/?api=tables&start=0&end=0",FETCH_OPT).then(response=>response.json()).then(data=>{onTableList(data)}).catch(err=>{stats.text("Error: "+err)}),$(tablesId).change(()=>{hash($(tablesId).val()),restore()}),fetch("/?api=user",FETCH_OPT).then(response=>response.json()).then(data=>{$("#user").text(data.auth?data.user:"unauth")})}),$("#exec").click(e=>{iside()?exec():build()}),$("#ui").on("click",ide),$("#timeline").click((function(){vis(windowId,$(this).is(":checked"))}));